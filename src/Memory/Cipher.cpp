#include "Cipher.hpp"

#include "Crc32.hpp"

static byte encryptedXorTable[937] =
{
    0xfb, 0xb4, 0xac, 0xb0, 0x50, 0x70, 0x30, 0x6a, 0xa0, 0xf5, 0x3e, 0x79, 0xdd, 0xdf, 0x3b, 0x0e,
    0x96, 0x05, 0xef, 0x3b, 0xd1, 0xf6, 0x56, 0x6c, 0xff, 0x16, 0x51, 0x4f, 0x72, 0xc3, 0x96, 0x98,
    0x96, 0xb9, 0x69, 0xcf, 0xea, 0x44, 0x97, 0x39, 0xba, 0x1a, 0x16, 0x65, 0xb5, 0x4d, 0x6a, 0xe7,
    0x81, 0x02, 0x50, 0x41, 0x55, 0xcb, 0x89, 0xec, 0xf6, 0x80, 0x18, 0xec, 0x3e, 0x93, 0x21, 0xb5,
    0x75, 0xce, 0xe7, 0x44, 0x7a, 0xe9, 0xf0, 0xe4, 0x4d, 0x1a, 0xfb, 0x89, 0x3e, 0xa7, 0x15, 0x1a,
    0xe2, 0x39, 0xff, 0x41, 0x6d, 0xeb, 0x66, 0xc4, 0x01, 0xca, 0x76, 0x75, 0xea, 0x34, 0x30, 0xf6,
    0x91, 0x59, 0x7b, 0xa3, 0x98, 0xbe, 0x7c, 0x9f, 0xf6, 0xea, 0x6d, 0x18, 0xb2, 0xbf, 0xe9, 0xc0,
    0xeb, 0x87, 0xcf, 0x31, 0x37, 0x14, 0x52, 0xbf, 0xce, 0x82, 0xcf, 0xaf, 0x0b, 0x87, 0x93, 0x70,
    0xbd, 0x34, 0x9b, 0x34, 0xff, 0x08, 0xb9, 0xd5, 0x7d, 0x49, 0xf7, 0x3e, 0x7f, 0x4e, 0xdd, 0x08,
    0xeb, 0x45, 0xc5, 0x11, 0xcf, 0x82, 0xf3, 0x3f, 0x01, 0x99, 0xde, 0xa4, 0x57, 0x99, 0x23, 0x66,
    0xa7, 0xa5, 0xe7, 0x5c, 0xf1, 0x42, 0x04, 0x92, 0x43, 0x88, 0x0d, 0xb5, 0xcb, 0xa6, 0x5d, 0x69,
    0xfb, 0x6e, 0xf9, 0xe2, 0xa9, 0x49, 0xeb, 0xdc, 0x27, 0xcd, 0x18, 0xa9, 0xd0, 0xae, 0x49, 0x86,
    0x95, 0xca, 0xab, 0xe8, 0x77, 0x6a, 0x63, 0x37, 0x2e, 0x04, 0x20, 0xca, 0x8a, 0xb8, 0xf0, 0x08,
    0xec, 0x9f, 0x02, 0x96, 0xae, 0x9c, 0xba, 0x04, 0x77, 0xb7, 0xed, 0x58, 0xef, 0xd5, 0xe8, 0x59,
    0x2a, 0xdb, 0x03, 0x26, 0xdd, 0x7a, 0x36, 0x01, 0x55, 0x9d, 0x7e, 0xe1, 0xa6, 0xa7, 0x89, 0xd9,
    0x2d, 0x52, 0x9f, 0x9a, 0xbd, 0x26, 0x20, 0x19, 0xaa, 0xb6, 0x70, 0xe3, 0x50, 0xab, 0xa4, 0x8c,
    0xe3, 0x0d, 0x25, 0x9c, 0x8b, 0x85, 0x1f, 0xf3, 0xdd, 0xee, 0x51, 0x19, 0xc4, 0x7c, 0x61, 0x47,
    0xf3, 0xf9, 0x6b, 0x2f, 0x04, 0xce, 0x83, 0xae, 0xd0, 0xf4, 0xd0, 0xbf, 0xb4, 0x1a, 0x1f, 0x13,
    0xfb, 0x58, 0x87, 0x4e, 0x56, 0x81, 0xb0, 0xa8, 0x8e, 0x23, 0x85, 0xc5, 0xb5, 0x25, 0x1d, 0xcd,
    0x45, 0xb5, 0x25, 0xe0, 0xef, 0xcf, 0x12, 0xc6, 0xc3, 0xf5, 0x22, 0x39, 0x80, 0x39, 0xc2, 0xa3,
    0x0c, 0x86, 0xb0, 0x7e, 0xc7, 0x85, 0xf4, 0x32, 0x72, 0x3d, 0xb1, 0x79, 0x27, 0x16, 0x55, 0x28,
    0x75, 0xff, 0x67, 0x81, 0x6a, 0x0e, 0xe6, 0x51, 0x4b, 0x63, 0xf6, 0x30, 0x39, 0xdc, 0x24, 0xca,
    0xed, 0xb7, 0xd4, 0x54, 0x45, 0x12, 0xcc, 0xae, 0x33, 0x6b, 0xb3, 0x58, 0x66, 0x1b, 0x28, 0xfa,
    0x38, 0xe5, 0xbe, 0x25, 0x83, 0xf1, 0xad, 0x92, 0x5e, 0x71, 0xf2, 0x85, 0xcf, 0xdc, 0xe4, 0x04,
    0x64, 0x51, 0xfc, 0x1f, 0xd6, 0x1a, 0xc7, 0x2a, 0x38, 0x11, 0x60, 0xd9, 0xe9, 0x00, 0x26, 0x9a,
    0x3f, 0xde, 0x6d, 0x72, 0xea, 0x35, 0x91, 0xcc, 0x61, 0x00, 0xf4, 0xb5, 0xb2, 0x5d, 0xca, 0xf5,
    0x3f, 0x42, 0xe8, 0xe4, 0xfc, 0x68, 0x4e, 0x8d, 0x40, 0xc2, 0x00, 0xb2, 0xe6, 0x98, 0xf9, 0x37,
    0x79, 0xe0, 0xdc, 0x87, 0xda, 0x4f, 0x23, 0xbf, 0xee, 0x40, 0x89, 0xd4, 0x99, 0x3c, 0x44, 0xe6,
    0x81, 0x40, 0xb3, 0x55, 0x36, 0xad, 0x4d, 0x6d, 0xc8, 0xf2, 0x8c, 0xe3, 0x38, 0xa7, 0x9c, 0x6c,
    0xbf, 0x91, 0xe6, 0xac, 0xc9, 0x2f, 0x87, 0x07, 0x01, 0x4a, 0x9a, 0x70, 0xc4, 0x5c, 0x20, 0xca,
    0xd9, 0x14, 0xf9, 0x03, 0xa1, 0x23, 0xe8, 0x48, 0x34, 0x54, 0x55, 0xcb, 0x61, 0x04, 0xb1, 0x65,
    0x0c, 0x02, 0xbf, 0x07, 0xe9, 0x62, 0x3f, 0xc1, 0x4f, 0xfd, 0x1d, 0x4e, 0x59, 0x04, 0x43, 0x25,
    0x6d, 0xf3, 0x7f, 0x44, 0x2f, 0x57, 0xa9, 0xb7, 0xc3, 0xe2, 0x7b, 0x04, 0x43, 0x05, 0xa6, 0x4e,
    0xef, 0xe8, 0x98, 0xb4, 0x5a, 0x32, 0xfd, 0xfc, 0x5a, 0x04, 0xbb, 0x1b, 0xb6, 0x01, 0xd8, 0x25,
    0x8e, 0x37, 0x6a, 0x63, 0x3f, 0x19, 0xa9, 0x9f, 0x45, 0xfb, 0x93, 0xb0, 0x60, 0x91, 0x3b, 0x7d,
    0x69, 0x96, 0x6f, 0x7f, 0xbc, 0x45, 0x25, 0xb5, 0x8c, 0xb8, 0xc6, 0x53, 0xd9, 0xe0, 0xfd, 0x1c,
    0x0d, 0x98, 0x09, 0x57, 0x7f, 0x53, 0xdc, 0x82, 0xff, 0x33, 0x8b, 0x26, 0xe4, 0xb8, 0x7a, 0xd4,
    0xe6, 0x9b, 0x02, 0x3c, 0xec, 0x1d, 0x3b, 0x6a, 0xfe, 0x24, 0x7c, 0xd1, 0xc6, 0x11, 0x28, 0x4c,
    0xda, 0x29, 0x54, 0x9c, 0x62, 0x65, 0x07, 0x87, 0x3a, 0x63, 0xc2, 0x79, 0x2e, 0xa7, 0xb8, 0x61,
    0xdf, 0x81, 0x4e, 0x9f, 0x6d, 0x7b, 0xba, 0x5a, 0x0a, 0x91, 0xe8, 0x26, 0xbb, 0xa0, 0xc7, 0x36,
    0x4d, 0xef, 0x93, 0x07, 0xa3, 0x5e, 0x13, 0x09, 0xbc, 0xd8, 0x6e, 0x3a, 0x9a, 0xd4, 0x87, 0x3d,
    0xe0, 0x80, 0xa2, 0x56, 0xf4, 0x39, 0xf9, 0xfe, 0x42, 0x1a, 0x0d, 0x1e, 0x93, 0xcb, 0x23, 0x71,
    0xca, 0x31, 0x39, 0x1b, 0x48, 0x42, 0xdf, 0x3b, 0x21, 0x4c, 0xf3, 0xef, 0x35, 0x55, 0xff, 0x17,
    0x91, 0xfd, 0xde, 0x3e, 0xd6, 0x28, 0x17, 0xb2, 0xe5, 0x81, 0x40, 0x5a, 0xae, 0xec, 0xa4, 0xbe,
    0x47, 0xe8, 0x04, 0x8c, 0x65, 0x22, 0xdf, 0xa1, 0x17, 0x51, 0xff, 0x12, 0xd0, 0xa9, 0xa5, 0x3c,
    0x52, 0xb7, 0x10, 0xb7, 0x2e, 0x4c, 0xf0, 0xb1, 0x2d, 0x2e, 0xb2, 0x04, 0x11, 0x74, 0xe7, 0x9a,
    0xe8, 0xda, 0x49, 0xf7, 0xfa, 0xf3, 0x43, 0x79, 0x71, 0x20, 0xeb, 0x9f, 0x18, 0x5c, 0x54, 0xf5,
    0x56, 0x36, 0x42, 0x5d, 0x15, 0x3a, 0x89, 0x17, 0x67, 0x91, 0xd2, 0x2a, 0x3c, 0x06, 0x7a, 0x51,
    0xb8, 0x69, 0x4e, 0xb6, 0xe6, 0xda, 0x9a, 0x20, 0x7a, 0xb6, 0xd5, 0xf4, 0x69, 0x5b, 0xfa, 0x50,
    0xe8, 0xfd, 0x2b, 0x09, 0x89, 0xc3, 0xe5, 0x8e, 0x88, 0x29, 0xc6, 0x99, 0x8d, 0x2f, 0x7a, 0x64,
    0xe5, 0x5b, 0x1d, 0xa4, 0x9c, 0x28, 0xfb, 0x7b, 0x12, 0x6d, 0xb2, 0x5a, 0xd7, 0xa4, 0xe3, 0x5f,
    0xf7, 0xa6, 0x4a, 0xf6, 0xf9, 0x06, 0xb0, 0x78, 0xf1, 0x46, 0xcd, 0x63, 0x40, 0x26, 0xb6, 0x48,
    0x58, 0x98, 0xd6, 0xe2, 0x0e, 0xa2, 0x1f, 0x0e, 0xdf, 0xf4, 0x51, 0x1d, 0x0f, 0x3e, 0xd7, 0x64,
    0x0b, 0x42, 0x15, 0xb2, 0x8d, 0xe1, 0xd0, 0xa8, 0x82, 0x8c, 0xcf, 0xd8, 0xcd, 0xf8, 0x55, 0xf5,
    0x0c, 0x7a, 0x63, 0x4d, 0xa2, 0x00, 0x34, 0x27, 0xbd, 0x2c, 0xd9, 0x04, 0x79, 0x14, 0xa1, 0x0c,
    0xc3, 0x57, 0x65, 0x6c, 0xeb, 0x03, 0x92, 0x94, 0x23, 0xe9, 0x74, 0xc3, 0x49, 0xea, 0x06, 0x3e,
    0x1d, 0x37, 0x5e, 0x26, 0x56, 0xf6, 0xee, 0x23, 0xc1, 0x38, 0x40, 0xc1, 0x76, 0x28, 0xd0, 0xff,
    0x0d, 0xba, 0x37, 0x44, 0xf1, 0x91, 0x8d, 0xee, 0xbd, 0x0b, 0x15, 0xf8, 0x6b, 0x7c, 0x59, 0xce,
    0x78, 0x28, 0xe9, 0xa0, 0x0c, 0xdc, 0xcf, 0x28, 0x1a
};

static byte encryptedAddTable[317] =
{
    0x15, 0xe1, 0xb8, 0x68, 0x0e, 0x84, 0x0b, 0x91, 0x50, 0xd5, 0x1f, 0x59, 0x9d, 0x7f, 0x65, 0x2b,
    0x88, 0xfb, 0x2e, 0x04, 0x21, 0x93, 0x94, 0x5b, 0xd3, 0xef, 0x8d, 0xb4, 0x26, 0xd6, 0x9f, 0x35,
    0x9a, 0xd3, 0x89, 0x0a, 0x32, 0xb5, 0x39, 0xcb, 0xef, 0x51, 0xa0, 0x84, 0x50, 0xd7, 0x40, 0xb2,
    0xc0, 0x14, 0xdc, 0x1e, 0xf4, 0xc0, 0x6f, 0x4c, 0xdd, 0xfa, 0x32, 0xb9, 0x77, 0x73, 0xbb, 0x7f,
    0xd9, 0x7b, 0x02, 0xb7, 0x30, 0x77, 0xf9, 0xb0, 0xe5, 0xc2, 0x8a, 0x1e, 0x30, 0x4d, 0x40, 0x82,
    0x21, 0x41, 0x81, 0x70, 0xf6, 0xcd, 0x20, 0x26, 0x3b, 0xfd, 0x45, 0xc7, 0x74, 0xc5, 0x1d, 0x81,
    0x06, 0x79, 0xc1, 0x80, 0x72, 0x95, 0x35, 0x02, 0x0b, 0xa4, 0x1e, 0x9b, 0x52, 0xfc, 0xd5, 0x68,
    0x90, 0x2b, 0x45, 0x27, 0x12, 0xc9, 0x66, 0x2c, 0x3f, 0x1c, 0xae, 0x24, 0x80, 0x64, 0x07, 0x7e,
    0xb9, 0xb0, 0x55, 0xf8, 0x78, 0x45, 0x60, 0x3a, 0x23, 0x38, 0x16, 0x52, 0x0b, 0x26, 0x8b, 0xb6,
    0xae, 0x36, 0x00, 0xb0, 0x52, 0xce, 0x60, 0x7c, 0xc2, 0xed, 0x32, 0x46, 0x32, 0xf6, 0xc1, 0xe0,
    0x8e, 0xda, 0xa4, 0x9e, 0x08, 0x40, 0x41, 0x59, 0xa6, 0xe5, 0x01, 0x1c, 0x1d, 0x66, 0x5b, 0x28,
    0x13, 0x3f, 0x0c, 0xd7, 0x9c, 0x62, 0x29, 0x76, 0x5e, 0x61, 0x4c, 0xe8, 0xd8, 0x16, 0xbb, 0xcb,
    0x1e, 0x65, 0x14, 0xee, 0x04, 0xf1, 0x7b, 0x9a, 0xb3, 0x2a, 0xb2, 0x85, 0x7f, 0x36, 0xfa, 0xc2,
    0xa1, 0x21, 0xb3, 0x84, 0xc1, 0x4a, 0x8e, 0x16, 0x06, 0x4a, 0x21, 0xc3, 0xe6, 0xc8, 0x26, 0xb7,
    0x86, 0x97, 0xb4, 0xa8, 0x80, 0xf5, 0x03, 0xd3, 0x2a, 0x41, 0x30, 0x42, 0xc5, 0x6c, 0xbc, 0x55,
    0xc3, 0x7e, 0x70, 0xb0, 0xca, 0x41, 0xdb, 0x2d, 0x64, 0x61, 0x2d, 0xbf, 0xab, 0x0b, 0x31, 0xca,
    0xee, 0x57, 0x88, 0x9e, 0xae, 0xdc, 0x77, 0x75, 0x71, 0xcb, 0x3c, 0x37, 0x92, 0x96, 0x65, 0xa0,
    0x8d, 0x13, 0x30, 0x2a, 0x07, 0xbd, 0x26, 0xd3, 0x8d, 0xbe, 0x6e, 0x97, 0xdf, 0x1b, 0x27, 0x2e,
    0x22, 0xfc, 0x95, 0xb2, 0x3d, 0xa3, 0xb7, 0x59, 0xe2, 0xf2, 0x9c, 0xaf, 0xcb, 0x40, 0x8a, 0xca,
    0xb5, 0x58, 0xeb, 0x3e, 0x6c, 0x69, 0xa1, 0x3c, 0x9f, 0x08, 0x9b, 0x21, 0x8b
};

Cipher GetDefaultCipher()
{
    std::initializer_list<byte> a{ 0x71, 0xdf, 0x49, 0x1f, 0xa4, 0x56, 0xe6, 0x78, 0xf6, 0x04, 0xec, 0x9b, 0xbb, 0xa0, 0x63, 0x4e,0x3e, 0xba, 0xa1 };
    std::initializer_list<byte> b{ 0x5d, 0x26, 0x43, 0x72, 0x0f, 0xc1, 0x23, 0x59, 0x95, 0xfb, 0x96, 0x22, 0x3e, 0x28, 0x93, 0xed, 0xf6 };

    Cipher addKeyCiper(a, b, 0x430b542d);
    Cipher xorKeyCiper(a, b, 0x1cba4856);

    std::vector<byte> decryptedXorTable(encryptedXorTable, encryptedXorTable + sizeof(encryptedXorTable));
    xorKeyCiper.Decrypt(decryptedXorTable.data(), decryptedXorTable.data() + decryptedXorTable.size());

    std::vector<byte> decryptedAddTable(encryptedAddTable, encryptedAddTable + sizeof(encryptedAddTable));
    addKeyCiper.Decrypt(decryptedAddTable.data(), decryptedAddTable.data() + decryptedAddTable.size());

    return Cipher(decryptedAddTable, decryptedXorTable, 0x35e41f03);
}

void Cipher::Encrypt(byte* begin, byte* end)
{
    unsigned int crc32 = InitialCrc32;

    for(int i = 0; i < end - begin; ++i)
    {
        byte nextByte = (byte)(((byte)(crc32 & 0xFF) + _addTable[i % _addTable.size()] + begin[i])) ^ _xorTable[i % _xorTable.size()] ^ _extraXor;
        crc32 = Crc32AddBytes(crc32, (char*)&begin[i], 1);
        begin[i] = nextByte;
    }
}

void Cipher::Decrypt(byte* begin, byte* end)
{
    unsigned int crc32 = InitialCrc32;
    std::vector<byte> result;

    for (int i = 0; i < end - begin; ++i)
    {
        byte nextByte = (byte)(begin[i] ^ _xorTable[i % _xorTable.size()] ^ _extraXor)
            - _addTable[i % _addTable.size()]
            - (byte)(crc32 & 0xFF);

        crc32 = Crc32AddBytes(crc32, (char*)&nextByte, 1);
        begin[i] = nextByte;
    }
}
